---
# tasks file for sshtun
- name: Ensure scripts startup directory is present on {{ hostname }}
  ansible.builtin.file:
    path: "{{ remote_script_path }}"
    owner: root
    group: root
    mode: '0700'
    recurse: True
    state: directory

- name: Ensure that autossh is installed on {{ hostname }}
  ansible.builtin.apt:
    name: autossh
    state: latest
  register: autossh_result

- name: Ensure scripts directory is present on {{ hostname }}
  ansible.builtin.file:
    path: "{{ remote_script_path }}"
    owner: root
    group: root
    mode: '0755'
    recurse: True
    state: directory

- name: Check if ssh tunnel persistence timer is installed on {{ hostname }}
  ansible.builtin.stat: 
    path: "{{ remote_service_path }}/{{ sshtun_timer }}"
  register: sshtun_timer_status

- name: Check if ssh tunnel service is installed on {{ hostname }}
  ansible.builtin.stat: 
    path: "{{ remote_service_path }}/{{ sshtun_service }}"
  register: sshtun_service_status

- name: Check if ssh tunnel cleanup service is installed on {{ hostname }}
  ansible.builtin.stat: 
    path: "{{ remote_service_path }}/{{ sshtun_cleanup_service }}"
  register: sshtun_cleanup_service_status

- name: Ensure that ssh tunnel persistence timer is turned off if installed on {{ hostname }}
  ansible.builtin.service:
    name: "{{ sshtun_timer }}"
    state: stopped
  register: sshtun_timer_stopped
  when: 'sshtun_timer_status.stat.exists'

- name: Ensure that ssh tunnel service is turned off if installed on {{ hostname }}
  ansible.builtin.service:
    name: "{{ sshtun_service }}"
    state: stopped
  register: sshtun_service_stopped
  when: sshtun_service_status.stat.exists

- name: Ensure that ssh tunnel cleanup service is turned off if installed on {{ hostname }}
  ansible.builtin.service:
    name: "{{ sshtun_cleanup_service }}"
    state: stopped
  register: sshtun_cleanup_service_stopped
  when: 'sshtun_cleanup_service_status.stat.exists'

- name: Copy default ssh tunnel script file on {{ hostname }}
  ansible.builtin.copy:
    remote_src: False
    src: "{{ local_script_path }}/{{ sshtun_script }}"
    dest: "{{ remote_script_path }}"
    owner: root
    group: root
    mode: '0700'
    force: True

- name: Copy default ssh tunnel script file on {{ hostname }}
  ansible.builtin.copy:
    remote_src: False
    src: "{{ local_script_path }}/{{ sshtun_cleanup_script }}"
    dest: "{{ remote_script_path }}"
    owner: root
    group: root
    mode: '0700'
    force: True

- name: Copy ssh tunnel custom service on {{ hostname }}
  ansible.builtin.copy:
    remote_src: False
    src: "{{ local_service_path }}/{{ sshtun_service }}"
    dest: "{{ remote_service_path }}"
    owner: root
    group: root
    mode: '0644'
    force: True
  register: sshtun_service_config

- name: Copy ssh tunnel persistence timer on {{ hostname }}
  ansible.builtin.template:
    remote_src: False
    src: "{{ local_service_path }}/{{ sshtun_timer }}"
    dest: "{{ remote_service_path }}"
    owner: root
    group: root
    mode: '0644'
    force: True
  register: sshtun_timer_config
  notify:
    - Restart service addon sshtunnel persistence

- name: Copy ssh tunnel cleanup service on {{ hostname }}
  ansible.builtin.template:
    remote_src: False
    src: "{{ local_service_path }}/{{ sshtun_cleanup_service }}"
    dest: "{{ remote_service_path }}"
    owner: root
    group: root
    mode: '0644'
    force: True
  register: sshtun_cleanup_config
  notify:
    - Restart service addon sshtunnel cleanup service

- name: Copying private key on {{ hostname }}
  ansible.builtin.copy:
    remote_src: False
    src: "{{ local_key_path }}/{{ key_file }}"
    dest: "{{ final_remote_key_path }}/{{ key_file }}"
    owner: root
    group: root
    mode: '0400'
    force: True

# ---------------------- SSH TUNNELING CONFIGURATION ---------------------------

- name: Changing ssh tunnel server configuration on {{ hostname }}
  ansible.builtin.replace:
    path: "{{ remote_script_path }}/{{ sshtun_script }}"
    regexp: "{{ current_remote_server }}"
    replace: '{{ remote_server }}'
  register: sshtun_server_output
  notify: 
    - Restart script file changes

- name: Changing ssh tunnel keyfile configuration on {{ hostname }}
  ansible.builtin.replace:
    path: "{{ remote_script_path }}/{{ sshtun_script }}"
    regexp: "{{ remote_key_path }}/{{ current_keyfile_config }}"
    replace: "{{ final_remote_key_path }}/{{ key_file }}"
  register: sshtun_keyfile_output
  notify: 
    - Restart script file changes

- name: Changing ssh tunnel user configuration on {{ hostname }}
  ansible.builtin.replace:
    path: "{{ remote_script_path }}/{{ sshtun_script }}"
    regexp: "{{ current_remote_user }}"
    replace: '{{ remote_user }}'
  register: sshtun_user_output
  notify: 
    - Restart script file changes

- name: Changing tunnel port configuration on {{ hostname }}
  ansible.builtin.replace:
    path: "{{ remote_script_path }}/{{ sshtun_script }}"
    regexp: "{{ default_tun_port }}"
    replace: "{{ tunnel_port }}"
  register: sshtun_tunport_output
  notify:
    - Restart script file changes

- name: Changing autossh monitor port configuration on {{ hostname }}
  ansible.builtin.replace:
    path: "{{ remote_script_path }}/{{ sshtun_script }}"
    regexp: "{{ default_mon_port }}"
    replace: "{{ monitor_port }}"
  register: sshtun_tunport_output
  notify:
    - Restart script file changes

# ---------------------- RELOADING CHANGES ---------------------------------

# Configure the daemon, the service file templates
# After it detected some changes on the pi
- name: Ensure to reload systemd daemon configuration changes on {{ hostname }}
  ansible.builtin.shell:
    cmd: 'systemctl daemon-reload'
  when: sshtun_service_config.changed

# ---------------------- STARTING SERVICES ---------------------------------

# Start services if it is selected as primary
# tunneling provider
- name: Starting sshtunnel service on {{ hostname }}
  ansible.builtin.service:
    name: "{{ sshtun_service }}"
    state: restarted
    enabled: True
  when: tunnel_service == "ssh"

- name: Starting sshtunnel cleanup service on {{ hostname }}
  ansible.builtin.service:
    name: "{{ sshtun_cleanup_service }}"
    state: restarted
    enabled: True
  when: tunnel_service == "ssh"
    
- name: Starting sshtunnel-persistence service on {{ hostname }}
  ansible.builtin.service:
    name: "{{ sshtun_timer }}"
    state: restarted
    enabled: True
  register: sshtun_service_restarted
  when: tunnel_service == "ssh"

# ---------------------- DEBUGGING  SSH TUNNEL -----------------------------

# Check and validate connectivity of the pi host
# to verbosely output on the CLI
#- name: Check ssh tunnel connectivity on {{ hostname }}
#  ansible.builtin.shell:
#    cmd: |
#      sleep 5 && \
#      netstat -plnt \
#      | grep -E 22\([0-9]\{1,2\}\)
#  register: sshtun_connection_test
#  when: tunnel_service == "ssh"
#- debug:
#    msg: "{{ sshtun_connection_test.stdout_lines }}"
#  when: tunnel_service == "ssh"
